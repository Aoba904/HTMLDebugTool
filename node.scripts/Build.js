// Generated by CoffeeScript 1.6.3
(function() {
  var Build, ClosureCompiler, HTMLParser, fs, parser, push;

  fs = require("fs");

  HTMLParser = require("./HTMLParser.js");

  ClosureCompiler = require("./ClosureCompiler.js");

  parser = new HTMLParser;

  push = function(ary, elem) {
    var src;
    src = elem.attaribute.src;
    if (/^\/\/|^http:\/\//.test(src)) {
      if (ary[ary.split].ary.length) {
        ary.split++;
      }
    } else {
      if (!ary[ary.split]) {
        ary[ary.split] = {
          elem: elem,
          ary: []
        };
      } else {
        head.remove(elem);
      }
      return ary[ary.split].ary.push(fileroot + "/" + src);
    }
  };

  Build = function(fileroot, callback) {
    var datas, source;
    datas = {
      html: []
    };
    return source = fs.readFile(fileroot + "/index.html", "utf-8", function(err, source) {
      var ary, b_script, body, error, h_script, head, html, lambda, load, loaded, sources, split, _i, _len, _results;
      if (err) {
        callback(err);
      }
      html = parser.parse(source);
      head = html.$("head");
      body = html.$("body");
      h_script = head.find("script");
      b_script = body.find("script");
      sources = [];
      sources.split = 0;
      split = 0;
      h_script.each(push.bind(null, sources));
      if (sources[sources.split]) {
        sources.split++;
      }
      b_script.each(push.bind(null, sources));
      loaded = 0;
      load = 0;
      error = false;
      _results = [];
      for (_i = 0, _len = sources.length; _i < _len; _i++) {
        ary = sources[_i];
        load++;
        lambda = function(ary) {
          return ClosureCompiler.compile(ary.ary, {
            type: "js",
            compiletype: "local"
          }, function(err, data) {
            if (err) {
              error = true;
              callback(err, data);
            }
            if (error) {
              return;
            }
            loaded++;
            ary.elem.innerText = data;
            if (load === loaded) {
              datas.html.push({
                url: "index.html",
                source: html.toString()
              });
            }
            return callback(false, datas);
          });
        };
        _results.push(lambda(ary));
      }
      return _results;
    });
  };

  exports.build = Build;

}).call(this);

/*
//@ sourceMappingURL=Build.map
*/
