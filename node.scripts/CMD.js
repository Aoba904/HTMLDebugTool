// Generated by CoffeeScript 1.6.3
(function() {
  var CP, Shell, addCommand, appendCommand, commands, disableCommandLine, enableCommandLine, getArguments, log, none, parseValue, voidCommand,
    _this = this;

  CP = require('child_process');

  commands = {};

  none = {};

  process.stdin.on('data', function(e) {
    return e.trim().split('\n').forEach(function(line) {
      var args, key, name, val, _i, _len;
      args = line.split(' ');
      name = args.shift();
      for (key = _i = 0, _len = args.length; _i < _len; key = ++_i) {
        val = args[key];
        val = parseValue(val);
        if (val !== none) {
          args[key] = val;
        }
      }
      return voidCommand(name, args);
    });
  });

  enableCommandLine = function() {
    process.stdin.resume();
    return process.stdin.setEncoding('utf8');
  };

  disableCommandLine = function() {
    return process.stdin.pause();
  };

  log = function(str) {
    return process.stdout.write(str + "\n");
  };

  addCommand = function(name, func) {
    return commands[name] = func;
  };

  appendCommand = function(obj) {
    var key, val, _results;
    _results = [];
    for (key in obj) {
      val = obj[key];
      _results.push(commands[key] = val);
    }
    return _results;
  };

  voidCommand = function(name, args) {
    return log(!commands[name] ? "\"" + name + "\" is unknown command." : ">" + commands[name].apply(null, args));
  };

  parseValue = function(str) {
    switch (str) {
      case "true" || "false":
        return new Boolean(str);
      case "null":
        return null;
      case "undefined":
        return void 0;
    }
    if (/^[0-9]+$/.test(str)) {
      return parseInt(str);
    } else if (/^[0-9]+\.[0-9]+$/.test(str)) {
      return parseFloat(str);
    } else if (/^".*"$/.test(str)) {
      return str.replace(/"/g, "");
    } else if (/[\s|\S]+/) {
      return str;
    }
    return none;
  };

  getArguments = function(func) {
    var args;
    return args = func.toString().match(/^function.+\)?/)[0].replace(/^function.*\(/, "").replace(/\).*{/, "").replace(/\s/g, "").split(", ");
  };

  Shell = function(command, args, callback) {
    var cc;
    cc = CP.spawn(command, args);
    cc.stdout.on("data", function(data) {
      return callback(false, data.toString('utf-8'));
    });
    cc.stderr.on("data", function(data) {
      return callback(data.toString('utf-8'));
    });
    return cc.stdin.end();
  };

  appendCommand({
    help: function() {
      var cmd, val;
      for (cmd in commands) {
        val = commands[cmd];
        log("--" + cmd + " " + getArguments(val).join(" "));
      }
      return "";
    },
    $: function(command, args) {
      var name;
      args = [].slice.call(arguments);
      name = args.shift();
      disableCommandLine();
      return Shell(name, args, function(data) {
        log(data);
        return enableCommandLine();
      });
    }
  });

  exports["void"] = voidCommand;

  exports.add = addCommand;

  exports.append = appendCommand;

  exports.log = log;

  exports.enable = enableCommandLine;

  exports.disable = disableCommandLine;

}).call(this);

/*
//@ sourceMappingURL=CMD.map
*/
