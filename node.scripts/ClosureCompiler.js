// Generated by CoffeeScript 1.6.3
(function() {
  var CP, FS, HTTP, QURSTR, YUIcompile, compile, localcompile, noderoot, webcompile,
    _this = this;

  FS = require("fs");

  HTTP = require("http");

  QURSTR = require('querystring');

  CP = require('child_process');

  noderoot = "";

  localcompile = function(files, callback) {
    var args, cc, url, _i, _len;
    args = ["-jar", noderoot + "/" + "compiler/closurecompiler.jar", "--warning_level", "QUIET"];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      url = files[_i];
      args.push("--js");
      args.push(url);
    }
    cc = CP.spawn("java", args);
    cc.stdout.on("data", function(data) {
      return callback(false, data.toString('utf-8'));
    });
    cc.stderr.on("data", function(data) {
      return callback(data.toString('utf-8'));
    });
    return cc.stdin.end();
  };

  webcompile = function(files, callback, option) {
    var client, code, error, request, url, _i, _len;
    code = "";
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      url = files[_i];
      code += FS.readFileSync(name, +"\n").toString('utf-8');
    }
    if (!option) {
      option = {};
    }
    error = function(error) {
      return callback(error);
    };
    client = HTTP.createClient(80, 'closure-compiler.appspot.com');
    client.on("error", error);
    request = client.request("POST", "/compile", {
      'host': 'closure-compiler.appspot.com',
      'Content-Type': 'application/x-www-form-urlencoded'
    });
    request.on("error", error);
    request.on("response", function(r) {
      r.setEncoding("utf8");
      return r.on("data", function(c) {
        if (c === "" || c === "^n") {
          compile(code, callback, {
            output_info: 'errors',
            compilation_level: option.compilation_level
          });
        }
        return callback(false, c);
      });
    });
    return request.end(QURSTR.stringify({
      js_code: code.toString("utf-8"),
      output_info: option.output_info || 'compiled_code',
      compilation_level: option.compilation_level || 'SIMPLE_OPTIMIZATIONS'
    }));
  };

  YUIcompile = function(option, callback) {
    var args, cc, root, type, url, _i, _len;
    if (!option) {
      option = {};
    }
    type = option.type || "css";
    root = noderoot ? option.root + "/" : "";
    args = ["-jar", root + "compiler/yuicompressor.jar", "--type", "css"];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      url = files[_i];
      args.push(url);
    }
    cc = CP.spawn("java", args);
    cc.stdout.on("data", function(data) {
      return callback(false, data.toString('utf-8'));
    });
    cc.stderr.on("data", function(data) {
      return callback(data.toString('utf-8'));
    });
    return cc.stdin.end();
  };

  compile = function(files, option, callback) {
    if (!(files instanceof Array)) {
      return callback("files object is not array.");
    }
    if (!option) {
      option = {};
    }
    if (option.type === "css") {
      return YUIcompile(files, callback);
    } else if (option.compiletype || "local" === "local") {
      return localcompile(files, callback);
    } else {
      return webcompile(files, callback);
    }
  };

  exports.compile = compile;

  exports.setRoot = function(str) {
    noderoot = str;
    if (noderoot !== "") {
      return noderoot += "/";
    }
  };

}).call(this);

/*
//@ sourceMappingURL=ClosureCompiler.map
*/
