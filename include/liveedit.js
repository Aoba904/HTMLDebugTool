// Generated by CoffeeScript 1.6.3
(function() {
  var context;

  context = {
    init: function(sync) {
      var child, _i, _len, _ref,
        _this = this;
      this.xhr = new XMLHttpRequest;
      this.resourceurl = [];
      this.resources = {};
      this.regexp = /\.com\/|\.jp\/|\.net\//;
      this.resourceurl.push(window.location.href);
      _ref = document.head.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if (child.tagName === "SCRIPT" && child.src !== "" && !this.regexp.test(child.src)) {
          this.resourceurl.push(child.src);
        }
        if (child.tagName === "LINK" && child.href !== "" && !this.regexp.test(child.href)) {
          this.resourceurl.push(child.href);
        }
      }
      return setInterval(function() {
        return _this.refresh();
      }, sync || 500);
    },
    refresh: function() {
      var last, url, _i, _len, _ref;
      _ref = this.resourceurl;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        url = _ref[_i];
        this.xhr.open("HEAD", url, false);
        this.xhr.send();
        if (this.xhr.readyState === 3) {
          return;
        }
        last = +new Date(this.xhr.getResponseHeader("Last-Modified"));
        if (isNaN(last)) {
          last = 0;
        }
        if (this.resources[url] !== void 0 && this.resources[url] !== last) {
          window.location.reload(true);
        }
        this.resources[url] = last;
      }
    }
  };

  context.init(500);

}).call(this);

/*
//@ sourceMappingURL=liveedit.map
*/
